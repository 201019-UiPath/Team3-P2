<Activity mc:Ignorable="sap sap2010" x:Class="QueryUserChoice" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib" xmlns:sd="clr-namespace:System.Data;assembly=System.Data" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property Name="in_Config" Type="InArgument(scg:Dictionary(x:String, x:Object))" />
    <x:Property Name="in_UserChoice" Type="InArgument(x:String)" />
    <x:Property Name="in_PossibleOptions" Type="InArgument(scg:ICollection(x:String))" />
  </x:Members>
  <sap:VirtualizedContainerService.HintSize>625,1408</sap:VirtualizedContainerService.HintSize>
  <sap2010:WorkflowViewState.IdRef>ActivityBuilder_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <scg:List x:TypeArguments="x:String" Capacity="20">
      <x:String>System.Activities</x:String>
      <x:String>System</x:String>
      <x:String>Microsoft.VisualBasic.CompilerServices</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Drawing</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>UiPath.Excel</x:String>
      <x:String>System.Xml.Serialization</x:String>
    </scg:List>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <scg:List x:TypeArguments="AssemblyReference" Capacity="36">
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.DataSetExtensions</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>System.ValueTuple</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>UiPath.Excel</AssemblyReference>
      <AssemblyReference>System.ComponentModel.Composition</AssemblyReference>
      <AssemblyReference>UiPath.Excel.Activities</AssemblyReference>
      <AssemblyReference>System.Data.DataSetExtensions</AssemblyReference>
      <AssemblyReference>System.Runtime.WindowsRuntime</AssemblyReference>
    </scg:List>
  </TextExpression.ReferencesForImplementation>
  <Sequence sap2010:Annotation.AnnotationText="Here, we ask the user which games they want to add, take their response, and then update an Excel sheet that the next workflows read in order to start adding games to accounts." DisplayName="Games to Add?" sap:VirtualizedContainerService.HintSize="605,1308" sap2010:WorkflowViewState.IdRef="Sequence_5">
    <sap:WorkflowViewStateService.ViewState>
      <scg:Dictionary x:TypeArguments="x:String, x:Object">
        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
        <x:Boolean x:Key="IsPinned">False</x:Boolean>
      </scg:Dictionary>
    </sap:WorkflowViewStateService.ViewState>
    <If Condition="[in_UserChoice = in_Config(&quot;EpicChoice&quot;).ToString() or in_UserChoice = in_PossibleOptions.Last]" DisplayName="If the user chose Epic" sap:VirtualizedContainerService.HintSize="563,899" sap2010:WorkflowViewState.IdRef="If_16">
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
      <If.Then>
        <Sequence sap:VirtualizedContainerService.HintSize="418,751" sap2010:WorkflowViewState.IdRef="Sequence_7">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <ui:InvokeWorkflowFile ContinueOnError="{x:Null}" DisplayName="Invoke GetGamesFromUser workflow" sap:VirtualizedContainerService.HintSize="376,87" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_8" UnSafe="False" WorkflowFileName="ProcessSteps/GetGamesFromUser.xaml">
            <ui:InvokeWorkflowFile.Arguments>
              <InArgument x:TypeArguments="x:String" x:Key="in_launcher">Epic</InArgument>
              <InArgument x:TypeArguments="x:String" x:Key="in_AddInputPath">[in_Config("EpicAddInputPath").ToString()]</InArgument>
              <InArgument x:TypeArguments="x:String" x:Key="in_AddInputSheet">[in_Config("EpicAddInputSheet").ToString()]</InArgument>
              <InArgument x:TypeArguments="x:String" x:Key="in_GetOutputWorkbook">[in_Config("EpicGetOutputPath").ToString()]</InArgument>
              <InArgument x:TypeArguments="x:String" x:Key="in_GetOutputSheet">[in_Config("EpicGetOutputSheet").ToString()]</InArgument>
              <InArgument x:TypeArguments="x:String" x:Key="in_InstallInputPath">[in_Config("EpicInstallInputPath").ToString()]</InArgument>
              <InArgument x:TypeArguments="x:String" x:Key="in_InstallInputSheet">[in_Config("EpicInstallInputSheet").ToString()]</InArgument>
            </ui:InvokeWorkflowFile.Arguments>
          </ui:InvokeWorkflowFile>
          <Sequence DisplayName="Get URL back" sap:VirtualizedContainerService.HintSize="376,532" sap2010:WorkflowViewState.IdRef="Sequence_6">
            <Sequence.Variables>
              <Variable x:TypeArguments="sd:DataTable" Name="FreeEpicGamesDT" />
              <Variable x:TypeArguments="sd:DataTable" Name="SelectedEpicGamesDT" />
            </Sequence.Variables>
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <ui:ReadRange AddHeaders="True" DataTable="[FreeEpicGamesDT]" DisplayName="Read Range" sap:VirtualizedContainerService.HintSize="334,87" sap2010:WorkflowViewState.IdRef="ReadRange_1" SheetName="[in_Config(&quot;EpicGetOutputSheet&quot;).ToString()]" WorkbookPath="[in_Config(&quot;EpicGetOutputPath&quot;).ToString()]">
              <ui:ReadRange.Range>
                <InArgument x:TypeArguments="x:String">
                  <Literal x:TypeArguments="x:String" Value="" />
                </InArgument>
              </ui:ReadRange.Range>
            </ui:ReadRange>
            <ui:ReadRange AddHeaders="True" DataTable="[SelectedEpicGamesDT]" DisplayName="Read Range" sap:VirtualizedContainerService.HintSize="334,87" sap2010:WorkflowViewState.IdRef="ReadRange_2" SheetName="[in_Config(&quot;EpicAddInputSheet&quot;).ToString()]" WorkbookPath="[in_Config(&quot;EpicAddInputPath&quot;).ToString()]">
              <ui:ReadRange.Range>
                <InArgument x:TypeArguments="x:String">
                  <Literal x:TypeArguments="x:String" Value="" />
                </InArgument>
              </ui:ReadRange.Range>
            </ui:ReadRange>
            <ui:JoinDataTables DataTable1="[FreeEpicGamesDT]" DataTable2="[SelectedEpicGamesDT]" DisplayName="Join Data Tables" sap:VirtualizedContainerService.HintSize="334,59" sap2010:WorkflowViewState.IdRef="JoinDataTables_1" JoinType="Inner" OutputDataTable="[FreeEpicGamesDT]">
              <ui:JoinDataTables.Arguments>
                <scg:List x:TypeArguments="ui:JoinOperationArgument" Capacity="4">
                  <ui:JoinOperationArgument Operand="{x:Null}" BooleanOperator="And" Operator="EQ">
                    <ui:JoinOperationArgument.Column1>
                      <InArgument x:TypeArguments="x:String">["Title"]</InArgument>
                    </ui:JoinOperationArgument.Column1>
                    <ui:JoinOperationArgument.Column2>
                      <InArgument x:TypeArguments="x:String">["Title"]</InArgument>
                    </ui:JoinOperationArgument.Column2>
                  </ui:JoinOperationArgument>
                </scg:List>
              </ui:JoinDataTables.Arguments>
            </ui:JoinDataTables>
            <ui:InvokeWorkflowFile ContinueOnError="{x:Null}" DisplayName="Invoke WriteToOutputSheet workflow" sap:VirtualizedContainerService.HintSize="334,87" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_10" UnSafe="False" WorkflowFileName="Components\WriteToOutputSheet.xaml">
              <ui:InvokeWorkflowFile.Arguments>
                <InArgument x:TypeArguments="x:String" x:Key="in_WorkbookPath">[in_Config("EpicAddInputPath").ToString()]</InArgument>
                <InArgument x:TypeArguments="sd:DataTable" x:Key="in_TableToWrite">[FreeEpicGamesDT]</InArgument>
                <InArgument x:TypeArguments="x:String" x:Key="in_WorkbookSheetName">[in_Config("EpicAddInputSheet").ToString()]</InArgument>
              </ui:InvokeWorkflowFile.Arguments>
            </ui:InvokeWorkflowFile>
          </Sequence>
        </Sequence>
      </If.Then>
    </If>
    <If Condition="[in_UserChoice = in_Config(&quot;SteamChoice&quot;).ToString() or in_UserChoice = in_PossibleOptions.Last]" DisplayName="If the user chose Steam" sap:VirtualizedContainerService.HintSize="563,235" sap2010:WorkflowViewState.IdRef="If_17">
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
      <If.Then>
        <ui:InvokeWorkflowFile ContinueOnError="{x:Null}" DisplayName="Invoke GetGamesFromUser workflow" sap:VirtualizedContainerService.HintSize="334,87" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_9" UnSafe="False" WorkflowFileName="ProcessSteps/GetGamesFromUser.xaml">
          <ui:InvokeWorkflowFile.Arguments>
            <InArgument x:TypeArguments="x:String" x:Key="in_launcher">Steam</InArgument>
            <InArgument x:TypeArguments="x:String" x:Key="in_AddInputPath">[in_Config("SteamAddInputPath").ToString()]</InArgument>
            <InArgument x:TypeArguments="x:String" x:Key="in_AddInputSheet">[in_Config("SteamAddInputSheet").ToString()]</InArgument>
            <InArgument x:TypeArguments="x:String" x:Key="in_GetOutputWorkbook">[in_Config("SteamGetOutputPath").ToString()]</InArgument>
            <InArgument x:TypeArguments="x:String" x:Key="in_GetOutputSheet">[in_Config("EpicGetOutputSheet").ToString()]</InArgument>
            <InArgument x:TypeArguments="x:String" x:Key="in_InstallInputPath">[in_Config("SteamInstallInputPath").ToString()]</InArgument>
            <InArgument x:TypeArguments="x:String" x:Key="in_InstallInputSheet">[in_Config("SteamInstallInputSheet").ToString()]</InArgument>
          </ui:InvokeWorkflowFile.Arguments>
        </ui:InvokeWorkflowFile>
      </If.Then>
    </If>
  </Sequence>
</Activity>